Message queues provide a way of sending a block of data from one process to another.
Message queues provide a reasonably easy and efficient way of passing data between two unrelated processes
advantage over named pipes that the message queue exists independently of both the sending and receiving processes, 
which removes some of the difficulties that occur in synchronizing the opening and closing of named pipes.

int msgctl(int msqid, int cmd, struct msqid_ds *buff);
---------------------------------------------------------------------------
int msgget(key_t key, int msgflg);

msg_flag :A special bit defined by IPC_CREAT must be bitwise ORed with the permissions to create a new message queue. 
The IPC_CREAT flag is silently ignored if the message queue already exists.
----------------------------------------------------------------------------
int msgrcv(int msqid, void *msg_ptr, size_t msg_sz, long int msgtype, int msgflg);

msg_flag:he fourth parameter, msgflg, controls what happens if either the current message queue is full or the systemwide limit on queued messages has been reached.
If msgflg has the IPC_NOWAIT flag set, the function will return immediately without sending the message and the return value will be â€“1
-----------------------------------------------------------------------------
int msgsnd(int msqid, const void *msg_ptr, size_t msg_sz, int msgflg);
----------------------------------------------------------------------------
ex:
sender.c

#include<stdio.h>
#include<sys/ipc.h>
#include<sys/types.h>
#include<sys/msg.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

struct msgqbuf
{
	long mtype;
	char mtext[50];
};
typedef struct msgqbuf msgque;
int main()
{
	int msgqid,siz,siz1,i;
	char ch;
	msgque q,q1;	
	msgqid=msgget(1234,0666|IPC_CREAT);
	if(msgqid==-1)
	{
		perror("\nMsg Queue Can't Create...\n");
		exit(1);
	}
	else
	{
		printf("\nMsg Queue Created Successfully...\n");
		q.mtype=0;
		do
		{	
			printf("\nEnter Data To Be sent\n");
			ch=getchar();
		        gets(q.mtext);
			siz=msgsnd(msgqid,q.mtext,strlen(q.mtext),0);
			if(siz==-1)
			{
				perror("\nMsg Sending Failed....\n");
				exit(1);
			}
			else if(siz==0)
			{
				printf("\nMsg Sent Successfully...\n");
			}
		printf("Do u want to continue sending msg..\nY:Yes\nN:No\n");
	        scanf(" %c",&ch);
	        }while(ch=='Y'||ch=='y');
        }
}
--------------------------------------------------------------------------------------------------------------------------------------
Reciever.C

#include<stdio.h>
#include<sys/ipc.h>
#include<sys/types.h>
#include<sys/msg.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

struct msgqbuf
{
	long mtype;
	char mtext[50];
};
typedef struct msgqbuf msgque;
int main()
{
	int msgqid,siz,siz1;
	msgque q,q1;
	char ch,ch1;
send:	msgqid=msgget(1234,0666|IPC_CREAT);
	if(msgqid==-1)
	{
		perror("\nMsg Queue Can't Create...\n");
		exit(1);
	}
	else
	{
		printf("\nMsg Queue Created Successfully...\n");
                printf("\nWaiting to receive message ...\n");
		q.mtype=0;
		
			siz=msgrcv(msgqid,q.mtext,BUFSIZ,0,0);
			if(siz==-1)
			{
				perror("\nMsg Recieve Error\n");
				exit(1);
			}
			else
			{
				printf("\nMsg Recieved Successfully...\n");
				printf("\nMsg:%s\tSize:%d\n",q.mtext,siz);
			}		
	}		
}
